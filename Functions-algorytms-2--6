1|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
def trojkat_pascala(n):
    # Tworzymy listę na przechowanie wierszy
    triangle = []

    for row_num in range(n):
        # Na początku każdego wiersza dodajemy 1 (pierwszy element w wierszu)
        row = [None] * (row_num + 1)
        row[0], row[-1] = 1, 1  # Pierwszy i ostatni element to zawsze 1

        # Wypełniamy środkowe elementy wiersza
        for j in range(1, len(row) - 1):
            row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j]

        # Dodajemy wiersz do trójkąta
        triangle.append(row)

    # Wyświetlamy trójkąt
    for row in triangle:
        print(" ".join(map(str, row)))
# Przykład użycia:
n = int(input("Podaj liczbę wierszy Trójkąta Pascala: "))
trojkat_pascala(n)
2||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
def liczby(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
        return True
def blizniacze(n=1000):
    for i in range(2, n):
        if liczby(i) and liczby(i + 2):
            print(f"({i}, {i + 2})")
blizniacze(100)
3||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
def liczbyCatalana(limit = 1000000):
    c = 1
    parzyste = 0
    nieparzyste = 0
    n = 0
    while c < limit:
        if c % 2 == 0:
            parzyste += 1
        else:
            nieparzyste += 1
        print(f"C_{n} = {c}")
        n += 1
        c = (4 * n - 2) * c // (n + 1)

        print(f"Liczb parzystych: {parzyste}")
        print(f"Liczb nieparzystych: {nieparzyste}")
liczbyCatalana(1000000)
4|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
def liczbyDoskonale(n):

    if n <= 1:
        return False

    dzielniki = 0
    for i in range(1, n):
        if n % i == 0:
            dzielniki += i
    return dzielniki == n
number = int(input("Podaj liczbę: "))
if liczbyDoskonale(number):
    print(f"Liczba {number} Jest liczbą doskonałą")
else:
    print(f"Liczba {number} Nie jest liczbą doskonałą")
5||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
def newton(a, tolerancja=1e-10):
    x = a / 2
    while abs(x**2 - 2) > tolerancja:
        x = (x + a / x) / 2
        return x
a = 25
result = newton(a)
print(f"Pierwiastek kwadratowy z {a} wynosi {result}")
6||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
def szybkiePotegowanie(a, n):
    if n == 0:
        return 1
    elif n % 2 == 0:
        polowa = szybkiePotegowanie(a, n // 2)
        return polowa * polowa
    else:
        return a * szybkiePotegowanie(a, n - 1)
a = 2
n = 10
result = szybkiePotegowanie(a, n)
print(f"{a}^{n} = {result}")

